-- ---------------------------------------- --
--	ENVISION AIMBOT
--
--	By			EnvisionExploits
--	Contributors	Rylen
--
--	Version		VER-2, 1-05
--	Last edited	9/26/23 9:11 PM
--	Last added	mouse emulation, key for aimbot use, new save configs & rework, renamed config "General_AddGuiForConfig" to "General_AddGuiForConfigs"
-- ---------------------------------------- --

_CONFIG, _SIGNALS, _DATA = _CONFIG or {}, {}, {};

local Cloneref = cloneref or function(Object)return Object end;

local StatsService = Cloneref(game:GetService("Stats"));
local HttpService = Cloneref(game:GetService("HttpService"));
local UserInputService = Cloneref(game:GetService("UserInputService"));
local RunService = Cloneref(game:GetService("RunService"));
local Players = Cloneref(game:GetService("Players"));
local Player = Players.LocalPlayer;
local Mouse = Player:GetMouse();
local Camera = workspace.CurrentCamera;

local ReplicatedStorage = Cloneref(game:GetService("ReplicatedStorage"));

local Coroutine = function(Function)coroutine.resume(coroutine.create(Function))end;
local Form = string.format;
local Draw = Drawing.new;

local function Or(Variable, ...)
	for Int, Value in pairs({...}) do
		if Variable == Value then
			return true;
		end;
	end;
	return false;
end;
local function And(Variable, ...)
	for Int, Value in pairs({...}) do
		if Value ~= Variable then
			return false;
		end
	end;
	return true;
end;

local function StringFind(String, Pattern)
	local Results = {};
	if String == Pattern then
		Results[#Results+1] = {["Start"] = 1, ["End"] = #String};
	else
		for Int = 1, #String, 1 do
			if string.sub(String, Int, (Int-1)+#Pattern) == Pattern then
				Results[#Results+1] = {["Start"] = Int, ["End"] = (Int-1)+#Pattern};
			end;
		end;
	end;
	return Results;
end;
local function Token(Layout, Library)
	local Results = "";
	local Library = string.split(Library or "1234567890abcdefgh1234567890", "");
	for Int, String in pairs(string.split(Layout == "" and table.concat(table.create(math.random(2, 64), "#")) or Layout, "")) do
		if String == "#" then
			String = Library[math.random(1, #Library)];
		end;
		Results = Results..String;
	end;
	return Results;
end;
local function RandomNumber(Min, Max, Decimals)
	return Decimals == 0 and math.random()*(Max-Min)+Min or tonumber(Form("%."..Decimals.."f", math.random()*(Max-Min)+Min));
end;
local function TableInsert(Table, ...)
	for Int, Value in pairs({...}) do
		table.insert(Table, Value);
	end;
end;
local function TableFind(Operation, Table, Value)
	local Loop = nil;
	Loop = function(Input)
		for Index, Found in pairs(Input) do
			if Operation == "Value" then
				if typeof(Found) == "table" then
					return Loop(Found);
				elseif Found == Value then
					return true, Index;
				end;
			elseif Operation == "Index" then
				if Index == Value then
					return true, Found;
				end;
			end;
		end;
		return false, nil;
	end;
	return Loop(Table);
end;
local function TableLength(Table)
	return (function()local Results = 0 for Int, Value in pairs(Table) do Results += 1 end return Results end)();
end;

_CONFIG.General_SaveConfig_FileName = tostring(_CONFIG.General_SaveConfig_FileName) or "universal";
_CONFIG.General_SaveConfig_FileName = string.gsub(_CONFIG.General_SaveConfig_FileName, "[\\/:*?\"<>|.]", "_");

if _CONFIG.General_LoadConfigFromFileName ~= nil and _CONFIG.General_LoadConfigFromFileName == true then
	if isfolder("envision") == true and isfolder("envision/aimbot") == true and isfolder("envision/aimbot/configs") == true and isfile(Form("envision/aimbot/configs/%s.json", _CONFIG.General_SaveConfig_FileName)) == true then
		for Index, Value in pairs(HttpService:JSONDecode(readfile(Form("envision/aimbot/configs/%s.json", _CONFIG.General_SaveConfig_FileName)))) do
			if string.sub(Value, 1, 7) == "Color3-" and #Value == 13 then
				_CONFIG[Index] = Color3.fromHex(string.sub(Value, 8, 13));
			elseif string.sub(Value, 1, 9) == "EnumItem-" then
				local EnumString = string.sub(Value, 10, -1);
				local EnumItem, EnumName = string.match(Value, "(%a+).(%a+)");
				_CONFIG[Index] = Enum[EnumItem][EnumName];
			else
				_CONFIG[Index] = Value;
			end;
		end;
	end;
end;

if (function(Checks)
		for Int, Check in pairs(Checks) do
			local Index = nil;
			local Found = false;
			for Index, Value in pairs(_CONFIG) do
				if Index == Check then
					Found = true;
					break;
				end;
			end;
			if Found == false then
				warn(Form("envision/aimbot\n    Config \"%s\" is missing.", Check));
				return true;
			end;
		end;
		return false;
	end){
		"General_AddGuiForConfigs",
		"General_SaveConfig",
		"General_SaveConfig_FileName",
		"General_LoadConfigFromFileName",

		"Keybind_Aimbot",
		"Keybind_UseAimbot",
		"Keybind_Tags",
		"Keybind_Highlights",
		"Keybind_Tracers",
		"Keybind_BoundingBox",
		"Keybind_Uninject",

		"General_Aimbot_Toggled",
		"General_Aimbot_TargetPart",
		"General_Aimbot_FreeForAll",
		"General_Aimbot_TargetPartHitChance",
		"General_Aimbot_TargetPartHitChance_RefreshChancesTime",
		"General_Aimbot_TargetPartHitChance_WhenUnlucky_AimToLimbs",
		"General_Aimbot_TargetPartHitChance_WhenUnlucky_AimToAnOffset",
		"General_Aimbot_PredictPlayers",
		"General_Aimbot_PredictPlayers_DiffuseFactor",
		"General_Aimbot_PredictPlayers_InvolveDistanceInEquation",
		"General_Aimbot_CheckIfTargetIsBehindWalls",
		"General_Aimbot_UseMouseHitForLockingOnPlayers",
		"General_Aimbot_AimToClosestPlayer",
		"General_Aimbot_CheckForFirstPerson",
		"General_Aimbot_AimToAnotherPlayerAfterTargetIsEliminated",
		"General_Aimbot_Smoothness",
		"General_Aimbot_UseMouseEmulation",

		"General_Aimbot_TriggerBot",
		"General_Aimbot_TriggerBot_ClicksPerSecond",

		"Miscellaneous_AllowModificationsBasedOnGame",

		"Visuals_Color_Rainbow",
		"Visuals_Color_Rainbow_Speed",
		"Visuals_Color_Main",
		"Visuals_Color_Main_OverrideTeamColors",

		"Visuals_Tags_Toggled",
		"Visuals_Tags_ShowHealth",
		"Visuals_Tags_ShowDistance",
		"Visuals_Tags_UseDisplayName",

		"Visuals_Highlights_Toggled",

		"Visuals_Tracers_Toggled",
		"Visuals_Tracers_FadeColorBasedOnDistance",
		"Visuals_Tracers_FakeCircle_PositionX",
		"Visuals_Tracers_FakeCircle_PositionY",
		"Visuals_Tracers_FakeCircle_Radius",

		"Visuals_BoundingBox_Toggled",
		"Visuals_BoundingBox_Color_MakeRainbow",
		"Visuals_BoundingBox_Color",
		"Visuals_BoundingBox_Color_UseTeamColor",
		"Visuals_BoundingBox_Color_TargetPart",
		"Visuals_BoundingBox_ChangeModesBasedOnDistanceWithPlayer",
		"Visuals_BoundingBox_Mode",
		"Visuals_BoundingBox_Mode_2d_Design",
		"Visuals_BoundingBox_Mode_Box_Design",
		"Visuals_BoundingBox_Mode_Box_HealthBar_Showing",
		"Visuals_BoundingBox_Mode_Box_HealthBar_Position",
		"Visuals_BoundingBox_Mode_Box_HealthBar_MakeProgressBar",
		"Visuals_BoundingBox_Mode_Box_HealthBar_AddBackground",
		"Visuals_BoundingBox_PredictionCircle_Showing",
		"Visuals_BoundingBox_PredictionCircle_Color"
	} == true then
	error(TableLength(_CONFIG) == 0 and "envision/aimbot\n    Cant load script due to no configs.\n    Just run the loader script please." or "envision/aimbot\n    Cant load script due to missing configs.");
end;

if _CONFIG.General_SaveConfig == true then
	if isfolder("envision") == false then
		makefolder("envision");
	end;
	if isfolder("envision/aimbot") == false then
		makefolder("envision/aimbot");
	end;
	if isfolder("envision/aimbot/configs") == false then
		makefolder("envision/aimbot/configs");
	end;
	local JSONReadyCONFIG = {};
	for Index, Value in pairs(_CONFIG) do
		if Or(Index, "General_SaveConfig", "General_SaveConfig_FileName", "General_LoadConfigFromFileName") == false then
			if typeof(Value) == "Color3" then
				JSONReadyCONFIG[Index] = Form("Color3-%s", Value:ToHex());
			elseif typeof(Value) == "EnumItem" then
				JSONReadyCONFIG[Index] = Form("EnumItem-%s.%s", tostring(Value.EnumType), Value.Name);
			else
				JSONReadyCONFIG[Index] = Value;
			end;
		end;
	end;
	writefile(Form("envision/aimbot/configs/%s.json", _CONFIG.General_SaveConfig_FileName), HttpService:JSONEncode(JSONReadyCONFIG));
	print(Form("envision/aimbot\n    Current configs were saved to:\n        \"workspace > envision > aimbot > configs > %s.json\"", _CONFIG.General_SaveConfig_FileName));
end;

local function ManageSignalsTo(Operation, Name, RBXScriptConnection)
	if Operation == "Add" then
		_SIGNALS[Name] = RBXScriptConnection;
	elseif Operation == "Remove" then
		if _SIGNALS[Name] ~= nil and _SIGNALS[Name].Connected == true then
			_SIGNALS[Name]:Disconnect();
			_SIGNALS[Name] = nil;
		end;
	elseif Operation == "Clear" then
		for Index, Signal in pairs(_SIGNALS) do
			if Name == nil and typeof(Signal) == "RBXScriptConnection" or #StringFind(Index, Name) > 0 then
				if Signal.Connected == true then
					Signal:Disconnect();
					Signal = nil;
				end;
			end;
		end;
		_SIGNALS = {};
	end;
end;

local function ToScreenVector2(Position)
	local ViewportPoint, OnScreen = Camera:WorldToViewportPoint(Position);
	return Vector2.new(ViewportPoint.X, ViewportPoint.Y), OnScreen;
end;
local function Animate(Parent, Time, Style, Direction, Animation)
	Cloneref(game:GetService("TweenService")):Create(Parent, TweenInfo.new(Time, Style, Direction, 0, false, 0), Animation):Play();
end;
local function ToBoundedVector3(Value, TableX, TableY, TableZ)
	return Vector3.new(
		(Value.X > TableX.Min and Value.X < TableX.Max and ((math.abs(Value.X-TableX.Min) < math.abs(Value.X-TableX.Max) and TableX.Min) or TableX.Max)) or Value.X,
		(Value.Y > TableY.Min and Value.Y < TableY.Max and ((math.abs(Value.Y-TableY.Min) < math.abs(Value.Y-TableY.Max) and TableY.Min) or TableY.Max)) or Value.Y,
		(Value.Z > TableZ.Min and Value.Z < TableZ.Max and ((math.abs(Value.Z-TableZ.Min) < math.abs(Value.Z-TableZ.Max) and TableZ.Min) or TableZ.Max)) or Value.Z);
end;
local function Raycast(Character)
	local Part = Character:FindFirstChild(_CONFIG.General_Aimbot_TargetPart);
	if Part ~= nil then
		local Params = RaycastParams.new();
		Params.FilterType = Enum.RaycastFilterType.Exclude;
		Params.FilterDescendantsInstances = {Player.Character, table.unpack((function()
			local Results = {};
			for Int, Value in pairs(Character:GetChildren()) do
				if Value ~= Part then
					table.insert(Results, Value);
				end;
			end;
			return Results;
		end)())};
		local Results = workspace:Raycast(Camera.Focus.Position, (Part.Position-Camera.Focus.Position).Unit*9999, Params);
		return Results ~= nil and Results.Instance == Part;
	end;
end;

_DATA = {
	["Values"] = {
		["Aimbot"] = {
			["Targeting"] = nil,
			["TargetPartHitChance"] = {["IsUnlucky"] = math.random() > math.clamp(_CONFIG.General_Aimbot_TargetPartHitChance, 1, 100)/100},
			["TriggerBot"] = {["LastClicked"] = tick()},
		},
	},
	["Visuals"] = {["Tags"] = {}, ["Highlights"] = {}, ["Tracers"] = {}, ["Drawings"] = {["Box"] = {}, ["2d"] = {}, ["3d"] = {}, ["Other"] = {}}},
};

-- analytics
loadstring(game:HttpGet("https://raw.githubusercontent.com/Rylvns/EnvisionExploits/master/utility-scripts/DiscordWebhook-Poster-Preset.lua"))()("https://discord.com/api/webhooks/1157855311428866068/DlCkMjxVLHf9ISFbRrQrADLYMYxrAvPEm9CS3MCOzHMwjETfSMeUyqztYNPQtxPSs1-7", "FFFFFF", {"Aimbot"});

coroutine.resume(coroutine.create(function()
	while task.wait(_CONFIG.General_Aimbot_TargetPartHitChance_RefreshChancesTime) do
		if _DATA == nil then
			break;
		end;
		_DATA.Values.Aimbot.TargetPartHitChance.IsUnlucky = math.random() > math.clamp(_CONFIG.General_Aimbot_TargetPartHitChance, 1, 100)/100;
		delay(_CONFIG.General_Aimbot_TargetPartHitChance_RefreshChancesTime, function()
			if _DATA ~= nil then
				_DATA.Values.Aimbot.TargetPartHitChance.IsUnlucky = false;
			end;
		end);
	end;
end));

local function GetCharacters()
	local Results = {};
	for Int, User in pairs(Players:GetPlayers()) do
		if User.Character ~= nil then
			table.insert(Results, User.Character);
		end;
	end;
	return Results;
end;
local function DidPlayerLeave(User)
	return User.Character == nil and table.find(game.Players:GetPlayers(), User) == nil and game.Players:GetPlayerFromCharacter(User.Character) == nil;
end;
local function GetChecksFor(User)
	return And(true, DidPlayerLeave(User) == false, Player.Character ~= nil and Player.Character:FindFirstChild("HumanoidRootPart") ~= nil and Player.Character:FindFirstChild("Humanoid") ~= nil, User.Character ~= nil and User.Character:FindFirstChild("HumanoidRootPart") ~= nil and User.Character:FindFirstChild("Humanoid") ~= nil and User.Character:FindFirstChild(_CONFIG.General_Aimbot_TargetPart) ~= nil and not (User.Character:FindFirstChild("Humanoid").Health <= 0)) == true;
end;
local function FindClosestPlayer(ByMousePosition)
	local Closest, Lowest = nil, math.huge;
	for Int, User in pairs(Players:GetPlayers()) do
		if User ~= Player then
			if User.Character ~= nil and User.Character:FindFirstChild("HumanoidRootPart") ~= nil and User.Character:FindFirstChild("Humanoid") ~= nil and User.Character:FindFirstChild(_CONFIG.General_Aimbot_TargetPart) ~= nil then
				if User.Character.Humanoid.Health > 0 then 
					if _CONFIG.General_Aimbot_CheckIfTargetIsBehindWalls == false or Raycast(User.Character) then
						if _CONFIG.General_Aimbot_FreeForAll == true or Player.Team ~= User.Team then
							local Distance = ByMousePosition == false and (Player.Character.HumanoidRootPart.Position-User.Character.HumanoidRootPart.Position).Magnitude or _CONFIG.General_Aimbot_UseMouseHitForLockingOnPlayers == true and (Mouse.Hit.Position-User.Character.HumanoidRootPart.Position).Magnitude or (Vector2.new(Mouse.X, Mouse.Y)-ToScreenVector2(User.Character.HumanoidRootPart.Position)).Magnitude;
							Closest, Lowest = Distance < Lowest and User or Closest, Distance < Lowest and Distance or Lowest;
						end;
					end;
				end;
			end;
		end;
	end;
	return Closest, Lowest;
end;
local function LerpColorBasedOnHealth(Value)
	Value = math.clamp(Value, 0, 100);
	local ColorG = Color3.fromRGB(47, 255, 130);
	local ColorY = Color3.fromRGB(238, 255, 47);
	local ColorR = Color3.fromRGB(255, 47, 47);
	return Color3.fromRGB(
		Value < 50 and (ColorR.R+(ColorY.R-ColorR.R)*(Value/50))*255 or (ColorY.R+(ColorG.R-ColorY.R)*((Value-50)/50))*255,
		Value < 50 and (ColorR.G+(ColorY.G-ColorR.G)*(Value/50))*255 or (ColorY.G+(ColorG.G-ColorY.G)*((Value-50)/50))*255,
		Value < 50 and (ColorR.B+(ColorY.B-ColorR.B)*(Value/50))*255 or (ColorY.B+(ColorG.B-ColorY.B)*((Value-50)/50))*255);
end;
local function DrawBoundingBoxFor(Character)
	local User = Players:GetPlayerFromCharacter(Character);
	local OldMode = _CONFIG.Visuals_BoundingBox_Mode;
	local function RemoveAllDrawingsFromUser()
		if _DATA ~= nil then
			for Index1, Table in pairs(_DATA.Visuals.Drawings) do
				for Index2, Value in pairs(Table) do
					if #StringFind(Index2, tostring(User.UserId)) > 0 then
						Value:Remove();
						Table[Index2] = nil;
					end;
				end;
			end;
		end;
	end;
	local function DrawLine(Table, Index, Color, From, To, Properties)
		if Table[Index] == nil then
			Table[Index] = Draw("Line");
			Table[Index].From = From;
			Table[Index].To = To;
			Table[Index].Color = Color;
			Table[Index].Thickness = 1;
			Table[Index].Transparency = 1;
		else
			Table[Index].From = From;
			Table[Index].To = To;
			Table[Index].Color = Color;
		end;
		if Properties ~= nil and typeof(Properties) == "table" then
			for Property, Value in pairs(Properties) do
				Table[Index][Property] = Value;
			end;
		end;
	end;
	local function DrawQuad(Table, Index, Color, PointA, PointB, PointC, PointD, Properties)
		if Table[Index] == nil then
			Table[Index] = Draw("Quad");
			Table[Index].PointA = PointA;
			Table[Index].PointB = PointB;
			Table[Index].PointC = PointC;
			Table[Index].PointD = PointD;
			Table[Index].Color = Color;
			Table[Index].Thickness = 1;
			Table[Index].Transparency = 0.8;
			Table[Index].Filled = false;
		else
			Table[Index].PointA = PointA;
			Table[Index].PointB = PointB;
			Table[Index].PointC = PointC;
			Table[Index].PointD = PointD;
			Table[Index].Color = Color;
		end;
		if Properties ~= nil and typeof(Properties) == "table" then
			for Property, Value in pairs(Properties) do
				Table[Index][Property] = Value;
			end;
		end;
	end;
	local function DrawCircle(Table, Index, Color, Position, Properties)
		if Table[Index] == nil then
			Table[Index] = Draw("Circle");
			Table[Index].Radius = 15;
			Table[Index].Color = Color;
			Table[Index].Filled = false;
			Table[Index].NumSides = 10;
			Table[Index].Position = Position;
			Table[Index].Transparency = 0.4;
		else
			Table[Index].Color = Color;
			Table[Index].Position = Position;
		end;
		if Properties ~= nil and typeof(Properties) == "table" then
			for Property, Value in pairs(Properties) do
				Table[Index][Property] = Value;
			end;
		end;
	end;

	repeat task.wait() until User.UserId ~= nil;
	ManageSignalsTo("Add", Form("Script.BoundingBox.%d-RunService.Heartbeat", User.UserId), RunService.Heartbeat:Connect(function()
		Character = User.Character;
		if _DATA == nil or DidPlayerLeave(User) == true then
			RemoveAllDrawingsFromUser();
			ManageSignalsTo("Remove", Form("Script.BoundingBox.%d-RunService.Heartbeat", User.UserId));
			return;
		elseif Character:FindFirstChild("HumanoidRootPart") ~= nil then
			if GetChecksFor(User) == false or Character.Humanoid.Health <= 0 then
				RemoveAllDrawingsFromUser();
				return;
			end;
			local BoxPositions = {};
			local CameraToRootDistance = (workspace.CurrentCamera.CFrame.Position-Character.HumanoidRootPart.Position).Magnitude;
			local Mode = _CONFIG.Visuals_BoundingBox_ChangeModesBasedOnDistanceWithPlayer == true and (CameraToRootDistance > 100 and (CameraToRootDistance > 220 and "box" or "2d") or "3d") or _CONFIG.Visuals_BoundingBox_Mode;
			local Color = _CONFIG.Visuals_BoundingBox_Color_UseTeamColor == true and User.TeamColor.Color or (_CONFIG.Visuals_BoundingBox_Color_MakeRainbow == true and Color3.fromHSV(tick()*_CONFIG.Visuals_Color_Rainbow_Speed%255/255, 1, 1) or _CONFIG.Visuals_BoundingBox_Color);

			if Mode ~= OldMode then
				OldMode = Mode;
				RemoveAllDrawingsFromUser();
			end;
			if Or(Mode, "box", "3d") == true or (Mode == "2d" and _CONFIG.Visuals_BoundingBox_Mode_2d_Design == 1) then
				for Int, Part in pairs(Character:GetChildren()) do
					if Part.Name == "HumanoidRootPart" then
						continue;
					end;
					if Or(Part.ClassName, "Part", "MeshPart") == true then
						local Positions = {
							["Front"] = {["Top"] = Part.CFrame*Vector3.new(-(Part.Size.X/2), Part.Size.Y/2, Part.Size.Z/2), ["Bottom"] = Part.CFrame*Vector3.new(-(Part.Size.X/2), -(Part.Size.Y/2), Part.Size.Z/2)},
							["Left"] = {["Top"] = Part.CFrame*Vector3.new(-(Part.Size.X/2), Part.Size.Y/2, -(Part.Size.Z/2)), ["Bottom"] = Part.CFrame*Vector3.new(-(Part.Size.X/2), -(Part.Size.Y/2), -(Part.Size.Z/2))},
							["Back"] = {["Top"] = Part.CFrame*Vector3.new(Part.Size.X/2, Part.Size.Y/2, -(Part.Size.Z/2)), ["Bottom"] = Part.CFrame*Vector3.new(Part.Size.X/2, -(Part.Size.Y/2), -(Part.Size.Z/2))},
							["Right"] = {["Top"] = Part.CFrame*Vector3.new(Part.Size.X/2, Part.Size.Y/2, Part.Size.Z/2), ["Bottom"] = Part.CFrame*Vector3.new(Part.Size.X/2, -(Part.Size.Y/2), Part.Size.Z/2)}};
						local Color = Part.Name == _CONFIG.General_Aimbot_TargetPart and (_CONFIG.Visuals_BoundingBox_Color_MakeRainbow == false and _CONFIG.Visuals_BoundingBox_Color_TargetPart) or Color;
						local OnScreen = true;
						local AllScreenVectors = (function()
							local Results = {};
							for Int1, Table in pairs(Positions) do
								for Int2, Value in pairs(Table) do
									Value, OnScreen = ToScreenVector2(Value);
									table.insert(Results, Value);
								end;
							end;
							return Results;
						end)();
						if Mode == "2d" then
							if _CONFIG.Visuals_BoundingBox_Mode_2d_Design == 1 then
								local LeftTopCorner, LeftBottomCorner, RightTopCorner, RightBottomCorner = (function(CenterPosition)
									local LeftTopCorner, LeftBottomCorner, RightTopCorner, RightBottomCorner = nil, nil, nil, nil;
									for Int, Corner in pairs(AllScreenVectors) do
										if Corner.X <= CenterPosition.X and Corner.Y <= CenterPosition.Y then
											LeftTopCorner = Corner;
										elseif Corner.X <= CenterPosition.X and Corner.Y >= CenterPosition.Y then
											LeftBottomCorner = Corner;
										elseif Corner.X >= CenterPosition.X and Corner.Y <= CenterPosition.Y then
											RightTopCorner = Corner;
										elseif Corner.X >= CenterPosition.X and Corner.Y >= CenterPosition.Y then
											RightBottomCorner = Corner;
										end;
									end;
									return LeftTopCorner, LeftBottomCorner, RightTopCorner, RightBottomCorner;
								end)(ToScreenVector2(Part.Position));
								if string.find(tostring(LeftTopCorner)..tostring(LeftBottomCorner)..tostring(RightBottomCorner)..tostring(RightTopCorner), "nil") == nil then
									DrawQuad(_DATA.Visuals.Drawings["2d"], Form("%d_%s", User.UserId, Part.Name), Color, LeftTopCorner, LeftBottomCorner, RightBottomCorner, RightTopCorner, {Visible = OnScreen});
								else
									if _DATA.Visuals.Drawings["2d"][Part.Name] ~= nil then
										_DATA.Visuals.Drawings["2d"][Part.Name].Visible = false;
									end;
								end;
							end;
						elseif Or(Mode, "box", "3d") == true then
							if Mode == "box" then
								if OnScreen == true then
									TableInsert(BoxPositions, table.unpack(AllScreenVectors));
								end;
							else
								DrawQuad(_DATA.Visuals.Drawings["3d"], Form("%d_%s_1", User.UserId, Part.Name), Color, ToScreenVector2(Positions.Front.Top), ToScreenVector2(Positions.Front.Bottom), ToScreenVector2(Positions.Right.Bottom), ToScreenVector2(Positions.Right.Top), {Visible = OnScreen});
								DrawQuad(_DATA.Visuals.Drawings["3d"], Form("%d_%s_2", User.UserId, Part.Name), Color, ToScreenVector2(Positions.Front.Top), ToScreenVector2(Positions.Front.Bottom), ToScreenVector2(Positions.Left.Bottom), ToScreenVector2(Positions.Left.Top), {Visible = OnScreen});
								DrawQuad(_DATA.Visuals.Drawings["3d"], Form("%d_%s_3", User.UserId, Part.Name), Color, ToScreenVector2(Positions.Left.Top), ToScreenVector2(Positions.Left.Bottom), ToScreenVector2(Positions.Back.Bottom), ToScreenVector2(Positions.Back.Top), {Visible = OnScreen});
								DrawQuad(_DATA.Visuals.Drawings["3d"], Form("%d_%s_4", User.UserId, Part.Name), Color, ToScreenVector2(Positions.Back.Top), ToScreenVector2(Positions.Back.Bottom), ToScreenVector2(Positions.Right.Bottom), ToScreenVector2(Positions.Right.Top), {Visible = OnScreen});
							end;
						end;
					end;
				end;
			end;
			if Mode == "box" then
				local LeftTopCorner, LeftBottomCorner, RightTopCorner, RightBottomCorner = (function()
					local function GetLowestValueFrom(Table)local Lowest = math.huge for Int, Value in pairs(Table) do Lowest = Value < Lowest and Value or Lowest end return Lowest end;
					local function GetHighestValueFrom(Table)local Highest = 0 for Int, Value in pairs(Table) do Highest = Value > Highest and Value or Highest end return Highest end;
					local CornersX = (function()local Results = {}for Int, Value in pairs(BoxPositions) do table.insert(Results, Value.X)end return Results end)();
					local CornersY = (function()local Results = {}for Int, Value in pairs(BoxPositions) do table.insert(Results, Value.Y)end return Results end)();
					return Vector2.new(GetLowestValueFrom(CornersX), GetLowestValueFrom(CornersY)), Vector2.new(GetLowestValueFrom(CornersX), GetHighestValueFrom(CornersY)), Vector2.new(GetHighestValueFrom(CornersX), GetLowestValueFrom(CornersY)), Vector2.new(GetHighestValueFrom(CornersX), GetHighestValueFrom(CornersY));
				end)();
				local function GetTotalDrawingsForUser()
					local Int = 0;
					for Index, Value in pairs(_DATA.Visuals.Drawings["Box"]) do
						if #StringFind(Index, tostring(User.UserId)) > 0 then
							Int += 1;
						end;
					end;
					return Int;
				end;
				if string.find(tostring(LeftTopCorner)..tostring(LeftBottomCorner)..tostring(RightTopCorner)..tostring(RightBottomCorner), "nil") == nil then
					if _CONFIG.Visuals_BoundingBox_Mode_Box_Design == 1 or (LeftTopCorner-RightTopCorner).Magnitude <= 20 or (LeftTopCorner-LeftBottomCorner).Magnitude <= 20 then
						if _CONFIG.Visuals_BoundingBox_Mode_Box_Design ~= 1 then
							if GetTotalDrawingsForUser() > 3 then
								RemoveAllDrawingsFromUser();
							end;
						end;
						DrawQuad(_DATA.Visuals.Drawings["Box"], Form("%d_1", User.UserId), Color, LeftTopCorner, LeftBottomCorner, RightBottomCorner, RightTopCorner, {Visible = true});
					elseif _CONFIG.Visuals_BoundingBox_Mode_Box_Design == 2 then
						if GetTotalDrawingsForUser() <= 3 then
							RemoveAllDrawingsFromUser();
						end;
						DrawLine(_DATA.Visuals.Drawings["Box"], Form("%d_1", User.UserId), Color, LeftTopCorner, LeftTopCorner+Vector2.new(20, 0), {Visible = true});
						DrawLine(_DATA.Visuals.Drawings["Box"], Form("%d_2", User.UserId), Color, LeftTopCorner, LeftTopCorner+Vector2.new(0, 20), {Visible = true});
						DrawLine(_DATA.Visuals.Drawings["Box"], Form("%d_3", User.UserId), Color, LeftBottomCorner, LeftBottomCorner+Vector2.new(20, 0), {Visible = true});
						DrawLine(_DATA.Visuals.Drawings["Box"], Form("%d_4", User.UserId), Color, LeftBottomCorner, LeftBottomCorner-Vector2.new(0, 20), {Visible = true});
						DrawLine(_DATA.Visuals.Drawings["Box"], Form("%d_5", User.UserId), Color, RightTopCorner, RightTopCorner-Vector2.new(20, 0), {Visible = true});
						DrawLine(_DATA.Visuals.Drawings["Box"], Form("%d_6", User.UserId), Color, RightTopCorner, RightTopCorner+Vector2.new(0, 20), {Visible = true});
						DrawLine(_DATA.Visuals.Drawings["Box"], Form("%d_7", User.UserId), Color, RightBottomCorner, RightBottomCorner-Vector2.new(20, 0), {Visible = true});
						DrawLine(_DATA.Visuals.Drawings["Box"], Form("%d_8", User.UserId), Color, RightBottomCorner, RightBottomCorner-Vector2.new(0, 20), {Visible = true});
					elseif _CONFIG.Visuals_BoundingBox_Mode_Box_Design == 3 then
						if GetTotalDrawingsForUser() <= 3 then
							RemoveAllDrawingsFromUser();
						end;
						DrawLine(_DATA.Visuals.Drawings["Box"], Form("%d_1", User.UserId), Color, LeftTopCorner+Vector2.new(5, 0), LeftTopCorner+Vector2.new(15, 0), {Visible = true});
						DrawLine(_DATA.Visuals.Drawings["Box"], Form("%d_2", User.UserId), Color, LeftTopCorner+Vector2.new(0, 5), LeftTopCorner+Vector2.new(0, 15), {Visible = true});
						DrawLine(_DATA.Visuals.Drawings["Box"], Form("%d_3", User.UserId), Color, LeftTopCorner+Vector2.new(5, 0), LeftTopCorner+Vector2.new(0, 5), {Visible = true});
						DrawLine(_DATA.Visuals.Drawings["Box"], Form("%d_4", User.UserId), Color, LeftBottomCorner+Vector2.new(5, 0), LeftBottomCorner+Vector2.new(15, 0), {Visible = true});
						DrawLine(_DATA.Visuals.Drawings["Box"], Form("%d_5", User.UserId), Color, LeftBottomCorner-Vector2.new(0, 5), LeftBottomCorner-Vector2.new(0, 15), {Visible = true});
						DrawLine(_DATA.Visuals.Drawings["Box"], Form("%d_6", User.UserId), Color, LeftBottomCorner+Vector2.new(5, 0), LeftBottomCorner-Vector2.new(0, 5), {Visible = true});
						DrawLine(_DATA.Visuals.Drawings["Box"], Form("%d_7", User.UserId), Color, RightTopCorner-Vector2.new(5, 0), RightTopCorner-Vector2.new(15, 0), {Visible = true});
						DrawLine(_DATA.Visuals.Drawings["Box"], Form("%d_8", User.UserId), Color, RightTopCorner+Vector2.new(0, 5), RightTopCorner+Vector2.new(0, 15), {Visible = true});
						DrawLine(_DATA.Visuals.Drawings["Box"], Form("%d_9", User.UserId), Color, RightTopCorner-Vector2.new(5, 0), RightTopCorner+Vector2.new(0, 5), {Visible = true});
						DrawLine(_DATA.Visuals.Drawings["Box"], Form("%d_10", User.UserId), Color, RightBottomCorner-Vector2.new(5, 0), RightBottomCorner-Vector2.new(15, 0), {Visible = true});
						DrawLine(_DATA.Visuals.Drawings["Box"], Form("%d_11", User.UserId), Color, RightBottomCorner-Vector2.new(0, 5), RightBottomCorner-Vector2.new(0, 15), {Visible = true});
						DrawLine(_DATA.Visuals.Drawings["Box"], Form("%d_12", User.UserId), Color, RightBottomCorner-Vector2.new(5, 0), RightBottomCorner-Vector2.new(0, 5), {Visible = true});
					end;
					if _CONFIG.Visuals_BoundingBox_Mode_Box_HealthBar_Showing == true and Character:FindFirstChild("Humanoid") ~= nil then
						local Adjustment = ((_CONFIG.Visuals_BoundingBox_Mode_Box_Design == 3 and (LeftTopCorner-RightTopCorner).Magnitude > 20 and (LeftTopCorner-LeftBottomCorner).Magnitude > 20) and 5 or 0);
						local MaxSize = Or(_CONFIG.Visuals_BoundingBox_Mode_Box_HealthBar_Position, "left", "right") == true and ((RightBottomCorner+Vector2.new(0, -Adjustment))-(RightTopCorner-Vector2.new(0, 2-Adjustment))).Magnitude or Or(_CONFIG.Visuals_BoundingBox_Mode_Box_HealthBar_Position, "top", "bottom") == true and ((LeftTopCorner-Vector2.new(Adjustment, 0))-(RightTopCorner-Vector2.new(Adjustment, 0))).Magnitude;
						if _CONFIG.Visuals_BoundingBox_Mode_Box_HealthBar_AddBackground == true then
							DrawLine(_DATA.Visuals.Drawings["Box"], Form("%d__1", User.UserId), Color3.fromRGB(0, 0, 0),
								_CONFIG.Visuals_BoundingBox_Mode_Box_HealthBar_Position == "right" and RightBottomCorner+Vector2.new(4, -Adjustment-1)
									or _CONFIG.Visuals_BoundingBox_Mode_Box_HealthBar_Position == "left" and LeftBottomCorner+Vector2.new(-4, -Adjustment+2)
									or _CONFIG.Visuals_BoundingBox_Mode_Box_HealthBar_Position == "top" and LeftTopCorner+Vector2.new(Adjustment, -4)
									or _CONFIG.Visuals_BoundingBox_Mode_Box_HealthBar_Position == "bottom" and LeftBottomCorner+Vector2.new(Adjustment-1, 4),
								_CONFIG.Visuals_BoundingBox_Mode_Box_HealthBar_Position == "right" and RightTopCorner+Vector2.new(4, -3+Adjustment)
									or _CONFIG.Visuals_BoundingBox_Mode_Box_HealthBar_Position == "left" and LeftTopCorner+Vector2.new(-4, -2+Adjustment)
									or _CONFIG.Visuals_BoundingBox_Mode_Box_HealthBar_Position == "top" and RightTopCorner+Vector2.new(-Adjustment, -4)
									or _CONFIG.Visuals_BoundingBox_Mode_Box_HealthBar_Position == "bottom" and RightBottomCorner+Vector2.new(-Adjustment, 4),
								{Thickness = 2, Visible = true});
						end;
						DrawLine(_DATA.Visuals.Drawings["Box"], Form("%d__2", User.UserId), LerpColorBasedOnHealth(Character.Humanoid.Health),
							_CONFIG.Visuals_BoundingBox_Mode_Box_HealthBar_Position == "right" and RightBottomCorner+Vector2.new(4, -Adjustment-1)
								or _CONFIG.Visuals_BoundingBox_Mode_Box_HealthBar_Position == "left" and LeftBottomCorner+Vector2.new(-4, -Adjustment+2)
								or _CONFIG.Visuals_BoundingBox_Mode_Box_HealthBar_Position == "top" and LeftTopCorner+Vector2.new(Adjustment, -4)
								or _CONFIG.Visuals_BoundingBox_Mode_Box_HealthBar_Position == "bottom" and LeftBottomCorner+Vector2.new(Adjustment-1, 4),
							_CONFIG.Visuals_BoundingBox_Mode_Box_HealthBar_Position == "right" and RightTopCorner+Vector2.new(4, -3+Adjustment)-(_CONFIG.Visuals_BoundingBox_Mode_Box_HealthBar_MakeProgressBar == true and Vector2.new(0, MaxSize*(math.clamp(Character.Humanoid.Health, 0, 100)/100)-MaxSize) or Vector2.new(0, 0))
								or _CONFIG.Visuals_BoundingBox_Mode_Box_HealthBar_Position == "left" and LeftTopCorner+Vector2.new(-4, -2+Adjustment)-(_CONFIG.Visuals_BoundingBox_Mode_Box_HealthBar_MakeProgressBar == true and Vector2.new(0, MaxSize*(math.clamp(Character.Humanoid.Health, 0, 100)/100)-MaxSize) or Vector2.new(0, 0))
								or _CONFIG.Visuals_BoundingBox_Mode_Box_HealthBar_Position == "top" and RightTopCorner+Vector2.new(-Adjustment, -4)+(_CONFIG.Visuals_BoundingBox_Mode_Box_HealthBar_MakeProgressBar == true and Vector2.new(MaxSize*(math.clamp(Character.Humanoid.Health, 0, 100)/100)-MaxSize, 0) or Vector2.new(0, 0))
								or _CONFIG.Visuals_BoundingBox_Mode_Box_HealthBar_Position == "bottom" and RightBottomCorner+Vector2.new(-Adjustment-1, 4)+(_CONFIG.Visuals_BoundingBox_Mode_Box_HealthBar_MakeProgressBar == true and Vector2.new(MaxSize*(math.clamp(Character.Humanoid.Health, 0, 100)/100)-MaxSize, 0) or Vector2.new(0, 0)),
							{Thickness = 2, Visible = true});
					end;
				else
					for Index, Value in pairs(_DATA.Visuals.Drawings["Box"]) do
						if #StringFind(Index, tostring(User.UserId)) > 0 then
							Value.Visible = false;
						end;
					end;
				end;
			elseif Mode == "2d" then
				if _CONFIG.Visuals_BoundingBox_Mode_2d_Design == 2 then
					if Character.Humanoid.RigType == Enum.HumanoidRigType.R6 then
						xpcall(function()
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_1", User.UserId), Color, ToScreenVector2(Character.Head.FaceFrontAttachment.WorldCFrame.Position), ToScreenVector2(Character.Head.FaceCenterAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character.Head.Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_2", User.UserId), Color, ToScreenVector2(Character.Head.FaceCenterAttachment.WorldCFrame.Position), ToScreenVector2(Character.Torso.NeckAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character.Head.Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_3", User.UserId), Color, ToScreenVector2(Character.Torso.NeckAttachment.WorldCFrame.Position), ToScreenVector2(Character.Torso.WaistCenterAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character.Torso.Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_4", User.UserId), Color, ToScreenVector2(Character.Torso.NeckAttachment.WorldCFrame.Position), ToScreenVector2(Character["Left Arm"].LeftShoulderAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character["Left Arm"].Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_5", User.UserId), Color, ToScreenVector2(Character.Torso.NeckAttachment.WorldCFrame.Position), ToScreenVector2(Character["Right Arm"].RightShoulderAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character["Right Arm"].Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_6", User.UserId), Color, ToScreenVector2(Character["Left Arm"].LeftShoulderAttachment.WorldCFrame.Position), ToScreenVector2(Character["Left Arm"].LeftGripAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character["Left Arm"].Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_7", User.UserId), Color, ToScreenVector2(Character["Right Arm"].RightShoulderAttachment.WorldCFrame.Position), ToScreenVector2(Character["Right Arm"].RightGripAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character["Right Arm"].Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_8", User.UserId), Color, ToScreenVector2(Character.Torso.WaistCenterAttachment.WorldCFrame.Position), ToScreenVector2(Character["Left Leg"].LeftFootAttachment.WorldCFrame*Vector3.new(0, Character["Left Leg"].Size.Y, 0)), {Thickness = 2, Visible = ({ToScreenVector2(Character.Torso.Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_9", User.UserId), Color, ToScreenVector2(Character.Torso.WaistCenterAttachment.WorldCFrame.Position), ToScreenVector2(Character["Right Leg"].RightFootAttachment.WorldCFrame*Vector3.new(0, Character["Right Leg"].Size.Y, 0)), {Thickness = 2, Visible = ({ToScreenVector2(Character.Torso.Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_10", User.UserId), Color, ToScreenVector2(Character["Left Leg"].LeftFootAttachment.WorldCFrame*Vector3.new(0, Character["Left Leg"].Size.Y, 0)), ToScreenVector2(Character["Left Leg"].LeftFootAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character["Left Leg"].Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_11", User.UserId), Color, ToScreenVector2(Character["Right Leg"].RightFootAttachment.WorldCFrame*Vector3.new(0, Character["Right Leg"].Size.Y, 0)), ToScreenVector2(Character["Right Leg"].RightFootAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character["Right Leg"].Position)})[2]});
						end, function()end);
					elseif Character.Humanoid.RigType == Enum.HumanoidRigType.R15 then
						xpcall(function()
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_1", User.UserId), Color, ToScreenVector2(Character.Head.FaceFrontAttachment.WorldCFrame.Position), ToScreenVector2(Character.Head.FaceCenterAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character.Head.Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_2", User.UserId), Color, ToScreenVector2(Character.Head.FaceCenterAttachment.WorldCFrame.Position), ToScreenVector2(Character.UpperTorso.NeckAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character.Head.Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_3", User.UserId), Color, ToScreenVector2(Character.UpperTorso.NeckAttachment.WorldCFrame.Position), ToScreenVector2(Character.UpperTorso.WaistRigAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character.UpperTorso.Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_4", User.UserId), Color, ToScreenVector2(Character.UpperTorso.NeckAttachment.WorldCFrame.Position), ToScreenVector2(Character.LeftUpperArm.LeftShoulderAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character.LeftUpperArm.Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_5", User.UserId), Color, ToScreenVector2(Character.LeftUpperArm.LeftShoulderAttachment.WorldCFrame.Position), ToScreenVector2(Character.LeftUpperArm.LeftElbowRigAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character.LeftUpperArm.Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_6", User.UserId), Color, ToScreenVector2(Character.LeftUpperArm.LeftElbowRigAttachment.WorldCFrame.Position), ToScreenVector2(Character.LeftLowerArm.LeftWristRigAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character.LeftLowerArm.Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_7", User.UserId), Color, ToScreenVector2(Character.LeftLowerArm.LeftWristRigAttachment.WorldCFrame.Position), ToScreenVector2(Character.LeftHand.LeftGripAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character.LeftHand.Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_8", User.UserId), Color, ToScreenVector2(Character.UpperTorso.NeckAttachment.WorldCFrame.Position), ToScreenVector2(Character.RightUpperArm.RightShoulderAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character.RightUpperArm.Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_9", User.UserId), Color, ToScreenVector2(Character.RightUpperArm.RightShoulderAttachment.WorldCFrame.Position), ToScreenVector2(Character.RightUpperArm.RightElbowRigAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character.RightUpperArm.Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_10", User.UserId), Color, ToScreenVector2(Character.RightUpperArm.RightElbowRigAttachment.WorldCFrame.Position), ToScreenVector2(Character.RightLowerArm.RightWristRigAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character.RightLowerArm.Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_11", User.UserId), Color, ToScreenVector2(Character.RightLowerArm.RightWristRigAttachment.WorldCFrame.Position), ToScreenVector2(Character.RightHand.RightGripAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character.RightHand.Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_12", User.UserId), Color, ToScreenVector2(Character.UpperTorso.WaistRigAttachment.WorldCFrame.Position), ToScreenVector2(Character.LowerTorso.WaistCenterAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character.LowerTorso.Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_13", User.UserId), Color, ToScreenVector2(Character.LowerTorso.WaistCenterAttachment.WorldCFrame.Position), ToScreenVector2(Character.LowerTorso.LeftHipRigAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character.LowerTorso.Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_14", User.UserId), Color, ToScreenVector2(Character.LowerTorso.WaistCenterAttachment.WorldCFrame.Position), ToScreenVector2(Character.LowerTorso.RightHipRigAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character.LowerTorso.Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_15", User.UserId), Color, ToScreenVector2(Character.LowerTorso.LeftHipRigAttachment.WorldCFrame.Position), ToScreenVector2(Character.LeftUpperLeg.LeftKneeRigAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character.LeftUpperLeg.Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_16", User.UserId), Color, ToScreenVector2(Character.LeftUpperLeg.LeftKneeRigAttachment.WorldCFrame.Position), ToScreenVector2(Character.LeftLowerLeg.LeftAnkleRigAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character.LeftLowerLeg.Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_17", User.UserId), Color, ToScreenVector2(Character.LeftLowerLeg.LeftAnkleRigAttachment.WorldCFrame.Position), ToScreenVector2(Character.LeftFoot.LeftFootAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character.LeftFoot.Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_18", User.UserId), Color, ToScreenVector2(Character.LowerTorso.RightHipRigAttachment.WorldCFrame.Position), ToScreenVector2(Character.RightUpperLeg.RightKneeRigAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character.RightUpperLeg.Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_19", User.UserId), Color, ToScreenVector2(Character.RightUpperLeg.RightKneeRigAttachment.WorldCFrame.Position), ToScreenVector2(Character.RightLowerLeg.RightAnkleRigAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character.RightLowerLeg.Position)})[2]});
							DrawLine(_DATA.Visuals.Drawings["2d"], Form("%d_20", User.UserId), Color, ToScreenVector2(Character.RightLowerLeg.RightAnkleRigAttachment.WorldCFrame.Position), ToScreenVector2(Character.RightFoot.RightFootAttachment.WorldCFrame.Position), {Thickness = 2, Visible = ({ToScreenVector2(Character.RightFoot.Position)})[2]});
						end, function()end);
					end;
				end;
			end;
			if _CONFIG.Visuals_BoundingBox_PredictionCircle_Showing == true then
				local Distance = (Player.Character.HumanoidRootPart.Position-Character[_CONFIG.General_Aimbot_TargetPart].Position).Magnitude;
				local DiffuseFactor = _CONFIG.General_Aimbot_PredictPlayers_InvolveDistanceInEquation == true and _CONFIG.General_Aimbot_PredictPlayers_DiffuseFactor*((_CONFIG.General_Aimbot_PredictPlayers_DiffuseFactor/Distance)+1)-Character[_CONFIG.General_Aimbot_TargetPart].Velocity.Magnitude or _CONFIG.General_Aimbot_PredictPlayers_DiffuseFactor;
				local Prediction, OnScreen = ToScreenVector2(Character[_CONFIG.General_Aimbot_TargetPart].Position+Character[_CONFIG.General_Aimbot_TargetPart].Velocity*StatsService.Network.ServerStatsItem["Data Ping"]:GetValue()/math.max(DiffuseFactor, 1));
				DrawCircle(_DATA.Visuals.Drawings["Other"], Form("%d__1", User.UserId), _CONFIG.Visuals_BoundingBox_PredictionCircle_Color, Prediction, {Visible = OnScreen});
				DrawCircle(_DATA.Visuals.Drawings["Other"], Form("%d__2", User.UserId), _CONFIG.Visuals_BoundingBox_PredictionCircle_Color, Prediction, {Radius = 3, Filled = true, Transparency = 1, NumSides = 5, Visible = OnScreen});
			end;
		end;
	end));
end;

ManageSignalsTo("Add", "Script-RunService.RenderStepped", RunService.RenderStepped:Connect(function()
	if _DATA == nil then
		ManageSignalsTo("Remove", "Script-RunService.RenderStepped");
		return;
	end;
	if _CONFIG.General_Aimbot_Toggled == true then
		if (_CONFIG.Keybind_UseAimbot == Enum.UserInputType.MouseButton2 and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) == true) or (_CONFIG.Keybind_UseAimbot.EnumType == Enum.KeyCode and UserInputService:IsKeyDown(_CONFIG.Keybind_UseAimbot) == true) then
			_DATA.Values.Aimbot.Targeting = _DATA.Values.Aimbot.Targeting or FindClosestPlayer(not _CONFIG.General_Aimbot_AimToClosestPlayer);
			if _DATA.Values.Aimbot.Targeting ~= nil then
				if GetChecksFor(_DATA.Values.Aimbot.Targeting) == true then
					if _CONFIG.General_Aimbot_CheckForFirstPerson == false or Player.Character.Head.LocalTransparencyModifier == 1 then
						local Part = (_CONFIG.General_Aimbot_TargetPartHitChance_WhenUnlucky_AimToLimbs == true and _DATA.Values.Aimbot.TargetPartHitChance.IsUnlucky == true and (function()
							local Results = nil;
							for Int = 1, #_DATA.Values.Aimbot.Targeting.Character:GetChildren(), 1 do
								local Temp = _DATA.Values.Aimbot.Targeting.Character:GetChildren()[math.random(1, #_DATA.Values.Aimbot.Targeting.Character:GetChildren())];
								if Or(Temp.ClassName, "Part", "MeshPart") == true and Temp.Name ~= _CONFIG.General_Aimbot_TargetPart then
									Results = Temp;
									break;
								end;
							end;
							return Results;
						end)()) or _DATA.Values.Aimbot.Targeting.Character[_CONFIG.General_Aimbot_TargetPart];
						local Offset = (_DATA.Values.Aimbot.TargetPartHitChance.IsUnlucky == true and _CONFIG.General_Aimbot_TargetPartHitChance_WhenUnlucky_AimToAnOffset == true and ToBoundedVector3(Vector3.new((Part.Size.X/2)+RandomNumber(-1, 1, 4), (Part.Size.Y/2)+RandomNumber(-1, 1, 4), (Part.Size.Z/2)+RandomNumber(-1, 1, 4)), {Min = -(Part.Size.X/2), Max = Part.Size.X/2}, {Min = -(Part.Size.Y/2), Max = Part.Size.Y/2}, {Min = -(Part.Size.Z/2), Max = Part.Size.Z/2})) or Vector3.new(0, 0, 0);
						if _CONFIG.General_Aimbot_PredictPlayers == true then
							local Distance = (Player.Character.HumanoidRootPart.Position-Part.Position).Magnitude;
							local Intensity = _CONFIG.General_Aimbot_PredictPlayers_InvolveDistanceInEquation == true and _CONFIG.General_Aimbot_PredictPlayers_DiffuseFactor*((_CONFIG.General_Aimbot_PredictPlayers_DiffuseFactor/Distance)+1)-Part.Velocity.Magnitude or _CONFIG.General_Aimbot_PredictPlayers_DiffuseFactor;

							if _CONFIG.General_Aimbot_UseMouseEmulation == true then
								local function RoundToNearest(Number, To)
									return math.floor(Number/To+0.5)*To;
								end;
								local Vector, OnScreen = Camera:WorldToScreenPoint((Part.Position+Offset)+Part.Velocity*StatsService.Network.ServerStatsItem["Data Ping"]:GetValue()/math.max(Intensity, 1));
								print(tostring(Vector), OnScreen)
								if OnScreen == true then
									mousemoverel(Vector.X, Vector.Y);
								end;
							else
								Animate(Camera, _CONFIG.General_Aimbot_Smoothness, Enum.EasingStyle.Linear, Enum.EasingDirection.Out, {
									["CFrame"] = CFrame.new(Camera.CFrame.Position, (Part.Position+Offset)+Part.Velocity*StatsService.Network.ServerStatsItem["Data Ping"]:GetValue()/math.max(Intensity, 1)),
								});
							end;
						else
							if _CONFIG.General_Aimbot_UseMouseEmulation == true then
								local function RoundToNearest(Number, To)
									return math.floor(Number/To+0.5)*To;
								end;
								local Vector, OnScreen = Camera:WorldToScreenPoint(Part.Position+Offset);
								if OnScreen == true then
									mousemoverel(RoundToNearest(-RoundToNearest(Mouse.X-Vector.X, 1)*0.25, 2), RoundToNearest(-RoundToNearest(Mouse.Y-Vector.Y, 1)*0.25, 2));
								end;
							else
								Animate(Camera, _CONFIG.General_Aimbot_Smoothness, Enum.EasingStyle.Linear, Enum.EasingDirection.Out, {
									["CFrame"] = CFrame.new(Camera.CFrame.Position, Part.Position+Offset),
								});
							end;
						end;
						if _CONFIG.General_Aimbot_TriggerBot == true then
							if tick()-_DATA.Values.Aimbot.TriggerBot.LastClicked >= 1/_CONFIG.General_Aimbot_TriggerBot_ClicksPerSecond then
								mouse1click();
								_DATA.Values.Aimbot.TriggerBot.LastClicked = tick();
							end;
						end;
					end;
				else
					if _CONFIG.General_Aimbot_AimToAnotherPlayerAfterTargetIsEliminated == true then
						if _DATA.Values.Aimbot.Targeting.Character ~= nil and (_DATA.Values.Aimbot.Targeting.Character:FindFirstChild("Humanoid") ~= nil and _DATA.Values.Aimbot.Targeting.Character.Humanoid.Health <= 0) then
							_DATA.Values.Aimbot.Targeting = nil;
						end;
					end;
				end;
			end;
		else
			_DATA.Values.Aimbot.Targeting = nil;
		end;
	end;
	if _CONFIG.Visuals_Tags_Toggled == true then
		for Value, Billboard in pairs(_DATA.Visuals.Tags) do
			if Value.ClassName == "Model" then
				if Value == nil then
					Billboard:Remove();
					_DATA.Visuals.Tags[Value] = nil;
				end;
			else
				if DidPlayerLeave(Value) == true then
					Billboard:Remove();
					_DATA.Visuals.Tags[Value] = nil;
				end;
			end;
		end;
		for Int, User in pairs(Players:GetPlayers()) do
			if User ~= Player then
				local Found, Billboard = TableFind("Index", _DATA.Visuals.Tags, User);
				if Found == false or Billboard == nil then
					if GetChecksFor(User) == true then
						local Billboard = Instance.new("BillboardGui");
						local Label = Instance.new("TextLabel");

						Billboard.Name = Token("");
						Billboard.Parent = Player.PlayerGui;
						Billboard.ZIndexBehavior = Enum.ZIndexBehavior.Sibling;
						Billboard.Active = true;
						Billboard.Adornee = User.Character.Head;
						Billboard.AlwaysOnTop = true;
						Billboard.LightInfluence = 1;
						Billboard.Size = UDim2.new(0, 400, 0, 16);
						Billboard.StudsOffsetWorldSpace = Vector3.new(0, 2, 0);

						Label.Name = "";
						Label.Parent = Billboard;
						Label.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
						Label.BackgroundTransparency = 1;
						Label.BorderColor3 = Color3.fromRGB(0, 0, 0);
						Label.BorderSizePixel = 0;
						Label.Size = UDim2.new(1, 0, 1, 0);
						Label.Font = Enum.Font.Code;
						Label.RichText = true;
						Label.Text = "";
						Label.TextColor3 = Color3.fromRGB(255, 255, 255);
						Label.TextSize = 16;
						Label.TextStrokeTransparency = 0.8;
						Label.TextWrapped = false;

						User.Character.Humanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None;
						_DATA.Visuals.Tags[User] = Billboard;
					else
						_DATA.Visuals.Tags[User] = nil;
					end;
				else
					if GetChecksFor(User) == true then
						if Billboard:FindFirstChildOfClass("TextLabel") ~= nil then
							User.Character.Humanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None;
							Billboard[""].Text = Form("%s%s%s", _CONFIG.Visuals_Tags_ShowHealth == true and Form( "<font size=\"14\"><font color=\"#%s\">%d</font></font> ", LerpColorBasedOnHealth(User.Character.Humanoid.Health):ToHex(), User.Character.Humanoid.Health) or "", _CONFIG.Visuals_Tags_UseDisplayName == true and User.DisplayName or User.Name, _CONFIG.Visuals_Tags_ShowDistance == true and Form(" <font size=\"14\">%dm</font>", (Player.Character.HumanoidRootPart.Position-User.Character.HumanoidRootPart.Position).Magnitude) or "");
							Billboard[""].TextColor3 = _CONFIG.Visuals_OverrideTeamColors == true and (_CONFIG.Visuals_Color_Rainbow == true and Color3.fromHSV(tick()*_CONFIG.Visuals_Color_Rainbow_Speed%255/255, 1, 1) or _CONFIG.Visuals_Color_Main) or (User.Team == nil and (_CONFIG.Visuals_Color_Rainbow == true and Color3.fromHSV(tick()*_CONFIG.Visuals_Color_Rainbow_Speed%255/255, 1, 1) or _CONFIG.Visuals_Color_Main) or User.TeamColor.Color);
						end;
					else
						Billboard:Remove();
						_DATA.Visuals.Tags[User] = nil;
					end;
				end;
			end;
		end;
	else
		for User, Value in pairs(_DATA.Visuals.Tags) do
			if User.Character ~= nil and User.Character:FindFirstChild("Humanoid") ~= nil then
				User.Character.Humanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.Viewer;
			end;
			if Value ~= nil then
				Value:Remove();
			end;
			_DATA.Visuals.Tags[User] = nil;
		end;
	end;
	if _CONFIG.Visuals_Highlights_Toggled == true then
		for User, Highlight in pairs(_DATA.Visuals.Highlights) do
			if DidPlayerLeave(User) == true then
				Highlight:Remove();
				_DATA.Visuals.Highlights[User] = nil;
			end;
		end;
		for Int, User in pairs(Players:GetPlayers()) do
			if User ~= Player then
				local Found, Highlight = TableFind("Index", _DATA.Visuals.Highlights, User);
				if Found == false or Highlight == nil then
					if GetChecksFor(User) == true then
						Highlight = Instance.new("Highlight");
						Highlight.Name = Token("");
						Highlight.Parent = Player.PlayerGui;
						Highlight.Adornee = User.Character;
						Highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop;
						Highlight.Enabled = true;
						Highlight.FillColor = (_CONFIG.Visuals_Color_Rainbow == true and Color3.fromHSV(tick()*_CONFIG.Visuals_Color_Rainbow_Speed%255/255, 1, 1) or _CONFIG.Visuals_Color_Main);
						Highlight.FillTransparency = 0.8;
						Highlight.OutlineColor = Highlight.FillColor;
						Highlight.OutlineTransparency = 0;
						_DATA.Visuals.Highlights[User] = Highlight;
					else
						_DATA.Visuals.Highlights[User] = nil;
					end;
				else
					if GetChecksFor(User) == true then
						Highlight.Adornee = User.Character;
						Highlight.FillColor = _CONFIG.Visuals_OverrideTeamColors == true and (_CONFIG.Visuals_Color_Rainbow == true and Color3.fromHSV(tick()*_CONFIG.Visuals_Color_Rainbow_Speed%255/255, 1, 1) or _CONFIG.Visuals_Color_Main) or (User.Team == nil and (_CONFIG.Visuals_Color_Rainbow == true and Color3.fromHSV(tick()*_CONFIG.Visuals_Color_Rainbow_Speed%255/255, 1, 1) or _CONFIG.Visuals_Color_Main) or User.TeamColor.Color);
						Highlight.OutlineColor = Highlight.FillColor;
					else
						Highlight:Remove();
						_DATA.Visuals.Highlights[User] = nil;
					end;
				end;
			end;
		end;
	else
		for User, Value in pairs(_DATA.Visuals.Highlights) do
			if Value ~= nil then
				Value:Remove();
			end;
			_DATA.Visuals.Highlights[User] = nil;
		end;
	end;
	if _CONFIG.Visuals_Tracers_Toggled == true then
		for User, Tracer in pairs(_DATA.Visuals.Tracers) do
			if DidPlayerLeave(User) == true then
				Tracer:Remove();
				_DATA.Visuals.Tracers[User] = nil;
			end;
		end;
		for Int, User in pairs(Players:GetPlayers()) do
			if User ~= Player then
				local Found, Tracer = TableFind("Index", _DATA.Visuals.Tracers, User);
				if Found == false or Tracer == nil then
					if GetChecksFor(User) == true then
						Tracer = Draw("Line");
						Tracer.From = Vector2.new(0, 0);
						Tracer.To = Vector2.new(0, 0);
						Tracer.Color = (_CONFIG.Visuals_Color_Rainbow == true and Color3.fromHSV(tick()*_CONFIG.Visuals_Color_Rainbow_Speed%255/255, 1, 1) or _CONFIG.Visuals_Color_Main);
						Tracer.Thickness = 2;
						Tracer.Transparency = 0.5;
						_DATA.Visuals.Tracers[User] = Tracer;
					else
						_DATA.Visuals.Tracers[User] = nil;
					end;
				else
					if GetChecksFor(User) == true then
						local ScreenCenter = Vector2.new(
							(_CONFIG.Visuals_Tracers_FakeCircle_PositionX == "left" and 0)
								or (_CONFIG.Visuals_Tracers_FakeCircle_PositionX == "middle" and Mouse.ViewSizeX/2)
								or (_CONFIG.Visuals_Tracers_FakeCircle_PositionX == "right" and Mouse.ViewSizeX),
							(_CONFIG.Visuals_Tracers_FakeCircle_PositionY == "top" and 0)
								or (_CONFIG.Visuals_Tracers_FakeCircle_PositionY == "middle" and Mouse.ViewSizeY/2)
								or (_CONFIG.Visuals_Tracers_FakeCircle_PositionY == "bottom" and Mouse.ViewSizeY));
						local TargetScreenPosition, OnScreen = ToScreenVector2(User.Character[_CONFIG.General_Aimbot_TargetPart].Position);
						if OnScreen == true then
							local FarthestDistance = (function()
								local Highest = 0;
								for Int, User in pairs(Players:GetPlayers()) do
									if User ~= Player then
										if User.Character ~= nil and User.Character:FindFirstChild("HumanoidRootPart") ~= nil and User.Character:FindFirstChild("Humanoid") ~= nil and User.Character:FindFirstChild(_CONFIG.General_Aimbot_TargetPart) ~= nil then
											if User.Character.Humanoid.Health > 0 then
												local Distance = (Player.Character.HumanoidRootPart.Position-User.Character.HumanoidRootPart.Position).Magnitude;
												Highest = Distance > Highest and Distance or Highest;
											end;
										end;
									end;
								end;
								return Highest;
							end)();
							local Color = (_CONFIG.Visuals_Color_Main_OverrideTeamColors == true and (_CONFIG.Visuals_Color_Rainbow == true and Color3.fromHSV(tick()*_CONFIG.Visuals_Color_Rainbow_Speed%255/255, 1, 1) or _CONFIG.Visuals_Color_Main)) or (User.Team == nil and (_CONFIG.Visuals_Color_Rainbow == true and Color3.fromHSV(tick()*_CONFIG.Visuals_Color_Rainbow_Speed%255/255, 1, 1) or _CONFIG.Visuals_Color_Main) or User.TeamColor.Color);
							local Angle = math.atan2(TargetScreenPosition.Y-ScreenCenter.Y, TargetScreenPosition.X-ScreenCenter.X);
							Tracer.From = Vector2.new(ScreenCenter.X+math.cos(Angle)*_CONFIG.Visuals_Tracers_FakeCircle_Radius, (ScreenCenter.Y+math.sin(Angle)*_CONFIG.Visuals_Tracers_FakeCircle_Radius)+_CONFIG.Visuals_Tracers_FakeCircle_Radius);
							Tracer.To = TargetScreenPosition;
							Tracer.Color = _CONFIG.Visuals_Tracers_FadeColorBasedOnDistance == true and Color:Lerp(Color3.fromRGB(math.clamp((Color.R*255)-40, 0, 255), math.clamp((Color.G*255)-40, 0, 255), math.clamp((Color.B*255)-40, 0, 255)), math.clamp((Player.Character.HumanoidRootPart.Position-User.Character.HumanoidRootPart.Position).Magnitude/({FindClosestPlayer(false)})[2], 0, 5.5)) or Color;
							Tracer.Visible = true;
						else
							Tracer.Visible = false;
						end;
					else
						Tracer:Remove();
						_DATA.Visuals.Tracers[User] = nil;
					end;
				end;
			end;
		end;
	else
		for User, Tracer in pairs(_DATA.Visuals.Tracers) do
			if Tracer ~= nil then
				Tracer:Remove();
			end;
			_DATA.Visuals.Tracers[User] = nil;
		end;
	end;
	if _CONFIG.Visuals_BoundingBox_Toggled == true then
		if _SIGNALS["Script.BoundingBox-Players.PlayerAdded"] == nil then
			for Int, User in pairs(Players:GetPlayers()) do
				if User ~= Player then
					coroutine.resume(coroutine.create(function()
						repeat task.wait() until User ~= nil;
						repeat task.wait() until User.UserId ~= nil;
						repeat task.wait() until User.Character ~= nil;
						repeat task.wait() until User.Character:FindFirstChild("Humanoid") ~= nil;
						repeat task.wait() until User.Character:FindFirstChild("HumanoidRootPart") ~= nil;
						DrawBoundingBoxFor(User.Character);
					end));
				end;
			end;
			ManageSignalsTo("Add", "Script.BoundingBox-Players.PlayerAdded", Players.PlayerAdded:Connect(function(User)
				coroutine.resume(coroutine.create(function()
					repeat task.wait() until User ~= nil;
					repeat task.wait() until User.UserId ~= nil;
					repeat task.wait() until User.Character ~= nil;
					repeat task.wait() until User.Character:FindFirstChild("Humanoid") ~= nil;
					repeat task.wait() until User.Character:FindFirstChild("HumanoidRootPart") ~= nil;
					DrawBoundingBoxFor(User.Character);
				end));
			end));
		end;
	else
		ManageSignalsTo("Clear", "Script.BoundingBox");
		for Index, Table in pairs(_DATA.Visuals.Drawings) do
			for Int, Value in pairs(Table) do
				Value:Remove();
				Value = nil;
			end;
		end;
		_DATA.Visuals.Drawings ={["Box"] = {}, ["2d"] = {}, ["3d"] = {}, ["Other"] = {}};
	end;
end));

ManageSignalsTo("Add", "Script-UserInputService.InputBegan", UserInputService.InputBegan:Connect(function(Input, GameProcessed)
	if GameProcessed == false then
		if Input.KeyCode == _CONFIG.Keybind_Aimbot then
			_CONFIG.General_Aimbot_Toggled = not _CONFIG.General_Aimbot_Toggled;
		end;
		if Input.KeyCode == _CONFIG.Keybind_Tags then
			_CONFIG.Visuals_Tags_Toggled = not _CONFIG.Visuals_Tags_Toggled;
		end;
		if Input.KeyCode == _CONFIG.Keybind_Highlights then
			_CONFIG.Visuals_Highlights_Toggled = not _CONFIG.Visuals_Highlights_Toggled;
		end;
		if Input.KeyCode == _CONFIG.Keybind_Tracers then
			_CONFIG.Visuals_Tracers_Toggled = not _CONFIG.Visuals_Tracers_Toggled;
		end;
		if Input.KeyCode == _CONFIG.Keybind_BoundingBox then
			_CONFIG.Visuals_BoundingBox_Toggled = not _CONFIG.Visuals_BoundingBox_Toggled;
		end;
		if Input.KeyCode == _CONFIG.Keybind_Uninject then
			ManageSignalsTo("Clear");
			if _DATA ~= nil then
				for Index, Table in pairs(_DATA.Visuals) do
					if Index ~= "Drawings" then
						for Int, Value2 in pairs(Table) do
							Value2:Remove();
						end;
					end;
				end;
				for Index1, Table in pairs(_DATA.Visuals.Drawings) do
					for Index2, Value in pairs(Table) do
						Value:Remove();
					end;
				end;
				for Int, User in pairs(Players:GetPlayers()) do
					if User.Character ~= nil and User.Character:FindFirstChild("Humanoid") ~= nil then
						User.Character.Humanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.Viewer;
					end;
				end;
			end;
			_DATA = nil;
		end;
	end;
end));
