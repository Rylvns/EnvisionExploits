local Form = string.format;
local function Or(Variable, Checks)
	for Int, Value in pairs(Checks) do
		if Variable == Value then
			return true;
		end;
	end;
	return false;
end;
function ExpandTable(Table1)
	local Tabs = 1;
	local Results = "{";
	local Loop = nil;
	local Types = {
		["BrickColor"] = BrickColor,
		["Color3"] = Color3,
		["ColorSequenceKeypoint"] = ColorSequenceKeypoint,
		["DockWidgetPluginGuiInfo"] = DockWidgetPluginGuiInfo,
		["FloatCurveKey"] = FloatCurveKey,
		["Font"] = Font,
		["Instance"] = Instance,
		["NumberRange"] = NumberRange,
		["PathWaypoint"] = PathWaypoint,
		["Ray"] = Ray,
		["Rect"] = Rect,
		["RotationCurveKey"] = RotationCurveKey,
		["TweenInfo"] = TweenInfo,
		["UDim2"] = UDim2,
		["Axes"] = Axes,
		["Faces"] = Faces,
		["OverlapParams"] = OverlapParams,
		["RaycastParams"] = RaycastParams,
		["Region3"] = Region3,
		["Region3int16"] = Region3int16,
		["CFrame"] = CFrame,
		["PhysicalProperties"] = PhysicalProperties,
		["UDim"] = UDim,
		["Vector2"] = Vector2,
		["Vector2int16"] = Vector2int16,
		["Vector3"] = Vector3,
		["Vector3int16"] = Vector3int16
	};
	local function GetIndexByValueInTable(Value1, Table)
		for Index, Value2 in pairs(Table) do
			if Value1 == Value2 then
				return Index;
			end;
		end;
	end;
	local function TypeToString(Value, Tabs)
		return (typeof(Value) == "string" and Form("\"%s\"", Value))
			or (typeof(Value) == "function" and (function()for Index, Value2 in pairs(Types)do if Value == Value2.new then return Index..".new"end end return"function()end"end)())
			or (typeof(Value) == "table" and (function()if Or(Value, Types) == true then return GetIndexByValueInTable(Value, Types)else local Lines = string.split(ExpandTable(Value), "\n")table.remove(Lines, 1)table.remove(Lines, #Lines)for Int, Value2 in pairs(Lines)do Lines[Int] = table.concat(table.create(Tabs, "    "))..Value2 end return Form("{\n%s\n%s}", table.concat(Lines, "\n"), table.concat(table.create(Tabs, "    ")))end end)())
			or (typeof(Value) == "BrickColor" and Form("BrickColor.new(%d)", Value.Number))
			or (typeof(Value) == "Color3" and Form("Color3.new(%d, %d, %d)", Value.R, Value.G, Value.B))
			or (typeof(Value) == "ColorSequenceKeypoint" and Form("ColorSequenceKeypoint.new(%d, Color3.new(%s))", Value.Time, tostring(Value.Value)))
			or (typeof(Value) == "DockWidgetPluginGuiInfo" and Form("DockWidgetPluginGuiInfo.new(Enum.InitialDockState.%s, %s, %s, %d, %d, %d, %d)", string.match(string.split(tostring(Value), " ")[1], "InitialDockState:(%a+)"), Value.InitialEnabled, Value.InitialEnabledShouldOverrideRestore, Value.FloatingXSize, Value.FloatingYSize, Value.MinWidth, Value.MinHeight))
			or (typeof(Value) == "Enums" and "Enum")
			or (typeof(Value) == "Enum" and Form("Enum.%s", tostring(Value)))
			or (typeof(Value) == "EnumItem" and Form("Enum.%s.%s", tostring(Value.EnumType), Value.Name))
			or (typeof(Value) == "FloatCurveKey" and Form("FloatCurveKey.new(%d, %d, Enum.KeyInterpolationMode.%s)", Value.Time, Value.Value, Value.Interpolation.Name))
			or (typeof(Value) == "Font" and Form("Font.new(\"%s\", Enum.FontWeight.%s, Enum.FontStyle.%s)", Value.Family, Value.Weight.Name, Value.Style.Name))
			or (typeof(Value) == "Instance" and (Value == game and "game" or (Value.Parent == nil and Form("Instance.new(\"%s\")", Value.ClassName) or "game."..Value:GetFullName())))
			or (typeof(Value) == "NumberRange" and Form("NumberRange.new(%d, %d)", Value.Min, Value.Max or Value.Min))
			or (typeof(Value) == "PathWaypoint" and Form("PathWaypoint.new(Vector3.new(%s), Enum.PathWaypointAction.%s, \"%s\")", tostring(Value.Position), Value.Action.Name, Value.Label))
			or (typeof(Value) == "Ray" and Form("Ray.new(Vector3.new(%s), Vector3.new(%s))", tostring(Value.Origin), tostring(Value.Direction)))
			or (typeof(Value) == "Rect" and Form("Rect.new(%s, %s)", tostring(Value.Min), tostring(Value.Max)))
			or (typeof(Value) == "RotationCurveKey" and Form("RotationCurveKey.new(%d, CFrame.new(%s), Enum.KeyInterpolationMode.%s)", Value.Time, tostring(Value.Value), Value.Interpolation.Name))
			or (typeof(Value) == "TweenInfo" and Form("TweenInfo.new(%d, Enum.EasingStyle.%s, Enum.EasingDirection.%s, %d, %s, %d)", Value.Time, Value.EasingStyle.Name, Value.EasingDirection.Name, Value.RepeatCount, Value.Reverses, Value.DelayTime))
			or (typeof(Value) == "UDim2" and Form("UDim2.new(%s, %s)", tostring(Value.X), tostring(Value.Y)))
			or Or(typeof(Value), {"Axes", "Faces", "OverlapParams", "RaycastParams", "Region3", "Region3int16"}) == true and Form("%s.new(--[[ CANT GET ]])", typeof(Value))
			or Or(typeof(Value), {"CFrame", "PhysicalProperties", "UDim", "Vector2", "Vector2int16", "Vector3", "Vector3int16"}) == true and Form("%s.new(%s)", typeof(Value), tostring(Value))
			or tostring(Value);
	end;
	Loop = function(Table2)
		for Int, Value in pairs(Table2) do
			if typeof(Value) == "table" then
				if Or(Value, Types) == true then
					Results ..= Form("\n%s[%s] = %s,", table.concat(table.create(Tabs, "    ")), TypeToString(Int, Tabs), GetIndexByValueInTable(Value, Types));
				else
					if rawlen(Value) > 0 or (function()local Result = 0 for Int2, Value2 in pairs(Value)do Result += 1 end return Result end)() > 0 then
						Results ..= Form("\n%s[%s] = {", table.concat(table.create(Tabs, "    ")), TypeToString(Int, Tabs));
						Tabs += 1;
						Loop(Value);
						Tabs -= 1;
						Results ..= Form("\n%s},", table.concat(table.create(Tabs, "    ")));
					else
						Results ..= Form("\n%s[%s] = {},", table.concat(table.create(Tabs, "    ")), TypeToString(Int, Tabs));
					end;
				end;
			else
				Results ..= Form("\n%s[%s] = %s,", table.concat(table.create(Tabs, "    ")), TypeToString(Int, Tabs), TypeToString(Value, Tabs));
			end;
		end;
	end;
	Loop(Table1);
	return Form("%s\n};", Results);
end;
